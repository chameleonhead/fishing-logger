service: fishing-logger-ships-api
frameworkVersion: "3"

plugins:
  - serverless-webpack

custom:
  webpack:
    includeModules:
      forceExclude:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/util-dynamodb"
        - "@aws-sdk/client-iot"
      nodeModulesRelativeDir: "../../"
    packagerOptions:
      lockFile: "../../package-lock.json"

package:
  individually: true

provider:
  name: aws
  region: ap-northeast-1
  runtime: nodejs16.x
  lambdaHashingVersion: "20201221"
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
    IOT_THING_GROUP_NAME: ${self:service}-${sls:stage}
    IOT_POLICY_NAME: ${self:service}-${sls:stage}
  httpApi:
    id: !ImportValue sls-fishing-logger-apigw-${sls:stage}-HttpApiId
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}
        - Effect: Allow
          Action:
            - iot:DescribeThing
            - iot:CreateThing
            - iot:AddThingToThingGroup
            - iot:AttachThingPrincipal
            - iot:AttachPolicy
            - iot:DetachPolicy
            - iot:DetachThingPrincipal
            - iot:RemoveThingFromThingGroup
            - iot:DeleteThing
            - iot:UpdateCertificate
            - iot:DeleteCertificate
          Resource: arn:aws:iot:${aws:region}:${aws:accountId}:*
        - Effect: Allow
          Action:
            - iot:DescribeEndpoint
            - iot:CreateKeysAndCertificate
            - iot:CreateCertificateFromCsr
          Resource: "*"

functions:
  list:
    handler: src/functions/list.list
    events:
      - httpApi:
          path: /api/ships
          method: get

  create:
    handler: src/functions/create.create
    events:
      - httpApi:
          path: /api/ships
          method: post

  get:
    handler: src/functions/get.get
    events:
      - httpApi:
          path: /api/ships/{id}
          method: get

  register-iot:
    handler: src/functions/register-iot.registerIot
    events:
      - httpApi:
          path: /api/ships/{id}/iot/register
          method: post

  unregister-iot:
    handler: src/functions/unregister-iot.unregisterIot
    events:
      - httpApi:
          path: /api/ships/{id}/iot/unregister
          method: delete

resources:
  Resources:
    shipsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    shipsIotCorePolicy:
      Type: AWS::IoT::Policy
      Properties:
        PolicyName: ${self:provider.environment.IOT_POLICY_NAME}
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - iot:Connect
              Resource:
                - !Join
                  - ""
                  - - "arn:aws:iot:${aws:region}:${aws:accountId}:client/$"
                    - "{iot:Connection.Thing.ThingName}"
            - Effect: Allow
              Action:
                - iot:Publish
                - iot:Subscribe
              Resource:
                - arn:aws:iot:${aws:region}:${aws:accountId}:topic/*
    shipsIotThingGroup:
      Type: AWS::IoT::ThingGroup
      Properties:
        ThingGroupName: ${self:provider.environment.IOT_THING_GROUP_NAME}
