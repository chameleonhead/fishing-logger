service: website
frameworkVersion: "3"

useDotenv: true

plugins:
  - serverless-dotenv-plugin
  - ./serverless-single-page-app-plugin

custom:
  s3Bucket: fishing-logger-website-${sls:stage}

provider:
  name: aws
  runtime: nodejs16.x

resources:
  Resources:
    ## Specifying the S3 Bucket
    WebAppS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
    ## Specifying the policies to make sure all files inside the Bucket are avaialble to CloudFront
    WebAppS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebAppS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*
    ## Specifying the CloudFront Distribution to server your Web Application
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: WebApp
              ## An identifier for the origin which must be unique within the distribution
              DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
              ## In case you want to restrict the bucket access use S3OriginConfig and remove CustomOriginConfig
              # S3OriginConfig:
              #   OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
            - Id: CatchesApi
              ## An identifier for the origin which must be unique within the distribution
              DomainName: ${env:API_GATEWAY_DOMAIN_NAME}
              OriginPath: /api
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
          Enabled: "true"
          ## Uncomment the following section in case you are using a custom domain
          # Aliases:
          # - mysite.example.com
          DefaultRootObject: index.html
          ## Since the Single Page App is taking care of the routing we need to make sure ever path is served with index.html
          ## The only exception are files that actually exist e.h. app.js, reset.css
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          DefaultCacheBehavior:
            ## The origin id defined above
            TargetOriginId: WebApp
            Compress: true
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            # CachingOptimized
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            # UserAgentRefererHeaders
            OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa
            ## The protocol that users can use to access the files in the origin. To allow HTTP use `allow-all`
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - PathPattern: /api/*
              TargetOriginId: CatchesApi
              Compress: false
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              # CachingDisabled
              CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad
              # UserAgentRefererHeaders
              OriginRequestPolicyId: acba4595-bd28-49b8-b9fe-13317c0390fa
              # # AllViewer prevent wrong host header to send to api gateway
              # TODO: create custom origin request policy
              # OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3
          ## The certificate to use when viewers use HTTPS to request objects.
          ViewerCertificate:
            CloudFrontDefaultCertificate: "true"
          HttpVersion: http2
          ## Uncomment the following section in case you want to enable logging for CloudFront requests
          # Logging:
          #   IncludeCookies: 'false'
          #   Bucket: mylogs.s3.amazonaws.com
          #   Prefix: myprefix

  ## In order to print out the hosted domain via `serverless info` we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value:
        "Fn::GetAtt": [WebAppCloudFrontDistribution, DomainName]
